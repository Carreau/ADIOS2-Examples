# Config file for Task 1 in a pipeline
#   - Produce variables  a  b  c 
#   - Write variable     a  b  c     to    stream_T1.bp

# Config file for Task 2 in a pipeline
#   - Read in variables  a  b  from Task 1 (ignore c) from stream_T1.bp
#   - Produce variable   d  e
#   - Write variables    a  b  d  e        to   stream_T2.bp


group  io_T1
  # item  type    varname     N   [gdim1 gdim2 ... gdimN  decomp1 decomp2 ... decompN]
  array   double  a           2    100   200              X       YZ
  array   float   b           1    100                    XYZ 
  array   float   c           3    100   200   300        XY      z     1

group io_T2
  # item  type    varname     N   [gdim1 gdim2 ... gdimN  decomp1 decomp2 ... decompN]
  array   double  a           2    100   200              XY      Z
  array   float   b           1    100                    XYZ 
  array   int     d           3    100   200   300        XY      z     1
  array   float   e           2    250   128              X       YZ

# Specify the number of output steps 
# This applies to the task which starts with writing. 
# Tasks that start with reading will process all steps from their producers

# Task 1 actions
app 1
  steps   3
  sleep   2.0      
    # write all of io_T1 into stream_T1.bp
  write   stream_T1.bp    io_T1

# Task 2 actions
app 2
  steps   3
  # read a & b from stream_T1.bp using io_T2 (!) definition with 1h timeout
  read next stream_T1.bp    io_T2   3600   a   b
  cond stream_T1.bp  sleep   2.0      

  # write io_T2 into stream_T2.bp
  #    a & b  will be the data from stream_T1.bp
  #    d & e  will be generated by app 2
  cond stream_T1.bp  write   stream_T2.bp    io_T2  

  sleep   1.123456789




